import streamlit as st
import pandas as pd
import io

# --- Configura√ß√£o da P√°gina ---
st.set_page_config(
    page_title="Repartidor de Base CSV",
    page_icon="‚úÇÔ∏è",
    layout="centered"
)

# --- T√≠tulo e Descri√ß√£o ---
st.title("‚úÇÔ∏è Repartidor de Base CSV")
st.markdown("""
Este aplicativo divide um arquivo CSV grande em v√°rios arquivos menores de igual tamanho.
Ideal para processar lotes de dados ou enviar bases em partes.
""")

# --- Barra Lateral para Controles ---
st.sidebar.header("Configura√ß√µes")

# 1. Upload do Arquivo
uploaded_file = st.sidebar.file_uploader(
    "Escolha um arquivo CSV",
    type=['csv'],
    help="Fa√ßa o upload da base de dados que voc√™ deseja dividir."
)

# 2. N√∫mero de Divis√µes
if uploaded_file is not None:
    # L√™ o arquivo apenas para obter o n√∫mero de linhas e mostrar ao usu√°rio
    try:
        # Usando chunksize para n√£o carregar o arquivo inteiro na mem√≥ria s√≥ para contar linhas
        # Mas para este app, carregar tudo √© mais simples e suficiente.
        df_temp = pd.read_csv(uploaded_file)
        total_rows = len(df_temp)
        st.sidebar.info(f"Seu arquivo tem **{total_rows:,}** linhas.")
        
        max_splits = total_rows
        num_splits = st.sidebar.number_input(
            "Em quantos lotes deseja dividir?",
            min_value=2,
            max_value=max_splits,
            value=10, # Valor padr√£o
            step=1,
            help="O n√∫mero total de arquivos que ser√£o gerados."
        )
    except Exception as e:
        st.sidebar.error(f"Erro ao ler o arquivo: {e}")
        st.stop()
else:
    st.sidebar.info("Por favor, fa√ßa o upload de um arquivo para come√ßar.")
    st.stop() # Para a execu√ß√£o se n√£o houver arquivo

# --- Bot√£o de A√ß√£o ---
if st.sidebar.button("üöÄ Dividir Base"):
    if uploaded_file is not None:
        # Re-l√™ o arquivo para processamento (o cursor do arquivo pode ter mudado)
        # Usamos io.StringIO para tratar o upload como um arquivo em mem√≥ria
        stringio = io.StringIO(uploaded_file.getvalue().decode('utf-8'))
        df = pd.read_csv(stringio)

        total_rows = len(df)
        
        # Valida√ß√£o para n√£o dividir em mais partes que linhas
        if num_splits > total_rows:
            st.error(f"N√£o √© poss√≠vel dividir {total_rows} linhas em {num_splits} arquivos.")
            st.stop()

        # Calcula o n√∫mero de linhas por lote
        rows_per_split = total_rows // num_splits
        
        st.success(f"Dividindo o arquivo `{uploaded_file.name}` em **{num_splits}** lotes de aproximadamente **{rows_per_split}** linhas cada.")

        # Cria uma lista para armazenar os dados dos novos arquivos
        split_files = []

        # Loop para criar os lotes
        for i in range(num_splits):
            start_index = i * rows_per_split
            # O √∫ltimo lote pega o resto das linhas, se houver
            end_index = start_index + rows_per_split if i < num_splits - 1 else total_rows
            
            # Fatia o DataFrame
            lote_df = df.iloc[start_index:end_index]
            
            # Converte o lote para CSV em mem√≥ria (sem o √≠ndice)
            csv_buffer = io.StringIO()
            lote_df.to_csv(csv_buffer, index=False)
            csv_data = csv_buffer.getvalue()
            
            # Define o nome do arquivo
            original_name = uploaded_file.name.replace('.csv', '')
            file_name = f"{original_name}_lote_{i+1}.csv"
            
            # Adiciona √† lista de arquivos para download
            split_files.append({'filename': file_name, 'data': csv_data})

        # --- √Årea de Download dos Arquivos ---
        st.subheader("üì¶ Arquivos Gerados")
        st.write("Clique nos bot√µes abaixo para baixar cada lote:")

        # Exibe um bot√£o de download para cada arquivo gerado
        for file_info in split_files:
            st.download_button(
                label=f"üì• Baixar {file_info['filename']}",
                data=file_info['data'],
                file_name=file_info['filename'],
                mime='text/csv',
                key=file_info['filename'] # Key √∫nica para cada bot√£o
            )
    else:
        st.warning("Por favor, fa√ßa o upload de um arquivo primeiro.")
