import streamlit as st
import pandas as pd
import io

# --- Configura√ß√£o da P√°gina ---
st.set_page_config(
    page_title="Repartidor de Base CSV",
    page_icon="‚úÇÔ∏è",
    layout="centered"
)

# --- T√≠tulo e Descri√ß√£o ---
st.title("‚úÇÔ∏è Repartidor de Base CSV")
st.markdown("""
Este aplicativo divide um arquivo CSV grande em v√°rios arquivos menores de igual tamanho.
Ideal para processar lotes de dados ou enviar bases em partes.
""")

# --- Inicializa√ß√£o do Estado da Sess√£o ---
# Isso √© crucial para que os arquivos gerados n√£o desapare√ßam
if 'generated_files' not in st.session_state:
    st.session_state.generated_files = []

# --- Barra Lateral para Controles ---
st.sidebar.header("Configura√ß√µes")

# 1. Upload do Arquivo
uploaded_file = st.sidebar.file_uploader(
    "Escolha um arquivo CSV",
    type=['csv'],
    help="Fa√ßa o upload da base de dados que voc√™ deseja dividir.",
    key="csv_uploader" # Chave √∫nica para o widget
)

# 2. N√∫mero de Divis√µes
if uploaded_file is not None:
    try:
        # L√™ o arquivo para obter o n√∫mero de linhas
        stringio = io.StringIO(uploaded_file.getvalue().decode('utf-8'))
        df_temp = pd.read_csv(stringio)
        total_rows = len(df_temp)
        st.sidebar.info(f"Seu arquivo tem **{total_rows:,}** linhas.")
        
        max_splits = total_rows
        num_splits = st.sidebar.number_input(
            "Em quantos lotes deseja dividir?",
            min_value=2,
            max_value=max_splits,
            value=10,
            step=1,
            help="O n√∫mero total de arquivos que ser√£o gerados."
        )
    except Exception as e:
        st.sidebar.error(f"Erro ao ler o arquivo: {e}")
        st.stop()
else:
    st.sidebar.info("Por favor, fa√ßa o upload de um arquivo para come√ßar.")

# --- Bot√£o de A√ß√£o Principal ---
if st.sidebar.button("üöÄ Dividir Base", type="primary"):
    if uploaded_file is not None:
        # Limpa resultados anteriores
        st.session_state.generated_files = []

        # Re-l√™ o arquivo para processamento
        stringio = io.StringIO(uploaded_file.getvalue().decode('utf-8'))
        df = pd.read_csv(stringio)

        # --- NOVA FUN√á√ÉO: Padronizar CPF ---
        # Tenta encontrar a coluna 'CPF' (ignorando mai√∫sculas/min√∫sculas)
        cpf_col = None
        for col in df.columns:
            if 'cpf' in col.lower():
                cpf_col = col
                break
        
        if cpf_col:
            # Converte a coluna para string e preenche com zeros √† esquerda at√© ter 11 d√≠gitos
            df[cpf_col] = df[cpf_col].astype(str).str.zfill(11)
            st.success(f"‚úÖ Coluna '{cpf_col}' encontrada e padronizada com 11 d√≠gitos.")
        else:
            st.warning("‚ö†Ô∏è Nenhuma coluna com 'CPF' no nome foi encontrada. Os arquivos ser√£o gerados sem a padroniza√ß√£o de CPF.")

        total_rows = len(df)
        
        if num_splits > total_rows:
            st.error(f"N√£o √© poss√≠vel dividir {total_rows} linhas em {num_splits} arquivos.")
            st.stop()

        rows_per_split = total_rows // num_splits
        
        # Cria uma lista para armazenar os dados dos novos arquivos
        split_files = []

        # Loop para criar os lotes
        for i in range(num_splits):
            start_index = i * rows_per_split
            end_index = start_index + rows_per_split if i < num_splits - 1 else total_rows
            
            lote_df = df.iloc[start_index:end_index]
            
            csv_buffer = io.StringIO()
            lote_df.to_csv(csv_buffer, index=False)
            csv_data = csv_buffer.getvalue()
            
            original_name = uploaded_file.name.replace('.csv', '')
            file_name = f"{original_name}_lote_{i+1}.csv"
            
            split_files.append({'filename': file_name, 'data': csv_data})

        # Armazena os arquivos gerados no estado da sess√£o
        st.session_state.generated_files = split_files
        st.success(f"Arquivo `{uploaded_file.name}` dividido em **{len(split_files)}** lotes com sucesso!")
        st.rerun() # For√ßa uma reexecu√ß√£o para exibir os resultados imediatamente

# --- √Årea de Download dos Arquivos (Persistente) ---
if st.session_state.generated_files:
    st.subheader("üì¶ Arquivos Gerados")
    st.write("Clique nos bot√µes abaixo para baixar cada lote:")

    for file_info in st.session_state.generated_files:
        st.download_button(
            label=f"üì• Baixar {file_info['filename']}",
            data=file_info['data'],
            file_name=file_info['filename'],
            mime='text/csv',
            key=file_info['filename'] # Key √∫nica para cada bot√£o
        )

# --- Bot√£o de Limpar ---
if st.session_state.generated_files:
    st.sidebar.markdown("---")
    if st.sidebar.button("üóëÔ∏è Limpar Painel"):
        st.session_state.generated_files = []
        st.rerun() # Recarrega a p√°gina para limpar a interface
